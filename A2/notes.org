* Thoughts
  - Drawing a wireframe cube...
    - So that just means a cube consisting of lines
  - The only thing we can do is draw lines in normalized device coordinates
    - Isn't that what we were doing in the previous assignment?
  - What's the difficulty? We just have to create the matrices by ourselves?
  - Okay, so we have a method called drawLine, which takes two vec2 instances and draws a line in between them.
    - I need to build the perspective and view matrices and adjust them on user input.
    - I also need to do clipping.
    - The vectors take in put in the form of normalized device coordinates.
  - We need to draw two coordinate frames:
    1) Cube's local modelling coordinates
    2) The world coordinate. They'll be fixed at 0, 0, 0
       - I guess initially, the world and the model coordinates will overlap. Then you can translate the cube, which will make them not overlap.
       - https://en.wikipedia.org/wiki/Gnomon
       - Might have to scale these to ensure that they're visible on the screen regardless of the transformations applied to the world and the model.
  - Need to maintain 4 coordinate systems
    - Model
    - Universal coordinates (world)
    - View (eyepoint)
    - Display coordinates
  - 3 matrices
    - M : model coordinates -> world coordinates
    - view : world coordinates -> camera coodinates
    - proj : camera coordinates -> 2d normal coordinates
  - You can apply modelling transformations
  - You can apply viewing transformations
  - 

* Tasks
** DONE Draw a Cube on the screen
   CLOSED: [2017-05-22 Mon 21:29]
   - Create a cube using 12 3d line segments
** TODO Clip line segments
   - So I've got the camera set up, along with the perspective matrix
   - I need to clip the line segments before I do the perspective transform.
   - Create a function called clip(tuple<vec4, vec4>, near, far) and clips it
     - Hmmm... maybe I should wait until tomorrow to do the clipping
     - I don't understand the perspective transformation. I should spend some time tomorrow understanding it.
     - 



* Homogeneous Clipping
  - With arbitrary w, you have to consider the case where w < 0 and w > 0
  - If you homogenize the coordinate and have w = 1, then you can clip just clip to X,Y,Z \in [-1, 1] without a care in the world
